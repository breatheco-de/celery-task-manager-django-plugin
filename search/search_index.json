{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What does this","text":"<p>Celery Task Manager was made by 4geeks.com to watch the activity of Celery, and it is used to see which tasks have bugs, this task provides an extra layer to avoid forgetting any data due to some Redis shutdown that should remove all tasks scheduled.</p>"},{"location":"changelog/v1.10.0/","title":"v1.10.0","text":"<ul> <li>Add <code>priority</code> to the <code>TaskManager</code> model.</li> <li>TaskManager doesn't reattempt <code>mark_task_as_pending</code>, <code>mark_task_as_paused</code>, <code>mark_task_as_cancelled</code> and <code>mark_task_as_reversed</code> tasks anymore.</li> <li><code>task_manager</code> command kills <code>PENDING</code> tasks before reattempting them.</li> </ul>"},{"location":"changelog/v1.11.3/","title":"Version 1.11.3","text":""},{"location":"changelog/v1.11.3/#changes","title":"Changes","text":"<ul> <li>Added approximate paginator to TaskManager</li> <li>Removed rescheduling from task manager</li> <li>Fixed task manager command</li> </ul>"},{"location":"changelog/v1.11.4/","title":"Version 1.11.4","text":""},{"location":"changelog/v1.11.4/#changes","title":"Changes","text":"<ul> <li>Fix Task Manager's pagination in Django Admin</li> </ul>"},{"location":"changelog/v1.5.0/","title":"v1.5.0","text":"<ul> <li>All tasks with the status <code>PENDING</code>, <code>PAUSED</code> or <code>SCHEDULED</code> won't be deleted.</li> <li>All tasks will be processed in batches of <code>100</code>.</li> <li>All tasks will be deleted in batches of <code>1000</code>.</li> </ul>"},{"location":"changelog/v1.6.0/","title":"v1.6.0","text":"<ul> <li>Add support for re-running tasks with status <code>SCHEDULED</code>.</li> </ul>"},{"location":"changelog/v1.7.0/","title":"v1.7.0","text":"<ul> <li>All <code>PENDING</code> tasks that overflow the max number of pages, will be marked as <code>DONE</code> and <code>fixed</code>.</li> </ul>"},{"location":"changelog/v1.8.0/","title":"v1.8.0","text":"<ul> <li>Add emisor, a wrapper of <code>Django Signals</code>.</li> <li>Add <code>delay</code> and <code>adelay</code> to the <code>Signal</code> object, it sends the execution to Celery.</li> </ul>"},{"location":"getting-started/emisors/","title":"Emisors","text":"<p>Emisor is a Django Signals wrapper that saves the errors in <code>SignalError</code> table for <code>send</code>, <code>send_robust</code>, <code>asend</code>, <code>asend_robust</code> and the cases <code>delay</code> and <code>adelay</code> appear within <code>TaskManager</code> table.</p>"},{"location":"getting-started/emisors/#setting-up","title":"Setting up","text":""},{"location":"getting-started/emisors/#change-it","title":"Change it","text":"<pre><code>from django.dispatch import Signal\n\nuser_specialty_saved = Signal()\n</code></pre>"},{"location":"getting-started/emisors/#for-it","title":"For it","text":"<pre><code>from task_manager.django.dispatch import Emisor\n\nemisor = Emisor('my.unique.id')\n\nuser_specialty_saved = emisor.signal('user_specialty_saved')\n</code></pre>"},{"location":"getting-started/emisors/#whats-new","title":"What's new","text":""},{"location":"getting-started/emisors/#delay","title":"delay","text":"<p>Send a signal to be executed within Celery synchronously and save the result within <code>TaskManager</code> table. It requires <code>sender</code> and <code>instance</code> param with id already set.</p>"},{"location":"getting-started/emisors/#adelay","title":"adelay","text":"<p>Send a signal to be executed within Celery asynchronously and save the result within <code>TaskManager</code> table. It requires <code>sender</code> and <code>instance</code> param with id already set.</p>"},{"location":"getting-started/emisors/#see-all-signal-errors-in-django-admin","title":"See all signal errors in Django Admin","text":"<p>Go to <code>/admin/task_manager/signalerror/</code>.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>You should install celery-task-manager with a few optional dependencies running:</p> <pre><code>pip install celery-task-manager[django,circuitbreaker]\n</code></pre>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional dependencies","text":""},{"location":"getting-started/installation/#django","title":"django","text":"<ul> <li>django</li> </ul>"},{"location":"getting-started/installation/#circuitbreaker","title":"circuitbreaker","text":"<ul> <li>circuitbreaker</li> </ul>"},{"location":"getting-started/schedule-tasks/","title":"Schedule Tasks","text":"<p>You should schedule a execution to be executed after a provided time, you need to have set-up <code>task_manager</code> command to use this feature. It is used frequently to make sure that the execution will be executed even if Redis was turned off.</p>"},{"location":"getting-started/schedule-tasks/#using-schedule_task","title":"Using <code>schedule_task</code>","text":"<p>It returns an instance of <code>ScheduledTaskManager</code>.</p>"},{"location":"getting-started/schedule-tasks/#arguments","title":"arguments","text":"<ul> <li><code>task</code>: a Celery task.</li> <li><code>eta</code>: when it will be executed, it requires a number + a unit, example: <code>2w</code> is 2 weeks.</li> </ul>"},{"location":"getting-started/schedule-tasks/#eta-units","title":"ETA units","text":"<ul> <li><code>s</code>: seconds.</li> <li><code>m</code>: minutes.</li> <li><code>h</code>: hours.</li> <li><code>d</code>: days.</li> <li><code>w</code>: weeks.</li> </ul>"},{"location":"getting-started/schedule-tasks/#examples","title":"Examples","text":"<pre><code>import logging\nfrom task_manager.django.actions import schedule_task\nfrom .tasks import async_remove_from_organization\n\n\nlogger = logging.getLogger(__name__)\n\n\n@receiver(pre_delete, sender=CohortUser)\ndef delete_cohort_user(sender, instance, **_):\n    # never ending cohorts cannot be in synch with github\n    if instance.cohort.never_ends:\n        return None\n\n    logger.debug('Cohort user deleted, removing from organization')\n    args = (instance.cohort.id, instance.user.id)\n    kwargs = {'force': True}\n\n    manager = schedule_task(async_remove_from_organization, '1w')\n    if not manager.exists(*args, **kwargs):\n        manager.call(*args, **kwargs)\n</code></pre>"},{"location":"getting-started/schedule-tasks/#scheduledtaskmanager","title":"ScheduledTaskManager","text":"<p>This class manages the scheduling tasks</p>"},{"location":"getting-started/schedule-tasks/#constructor","title":"constructor","text":""},{"location":"getting-started/schedule-tasks/#arguments_1","title":"Arguments","text":"<ul> <li><code>task</code>: a Celery task.</li> <li><code>eta</code>: when it will be executed, it requires a number + a unit, example: <code>2w</code> is 2 weeks.</li> </ul>"},{"location":"getting-started/schedule-tasks/#call","title":"call","text":"<p>Schedule a task execution. It accepts the arguments whichever you should pass to <code>delay</code> method.</p>"},{"location":"getting-started/schedule-tasks/#call_1","title":"call","text":"<p>Shortcut method that uses <code>call</code> method internally.</p>"},{"location":"getting-started/schedule-tasks/#acall","title":"acall","text":"<p>Asynchronous version of <code>call</code> method.</p>"},{"location":"getting-started/schedule-tasks/#exists","title":"exists","text":"<p>Return <code>True</code> if the task exists, <code>False</code> otherwise. It accepts the arguments whichever you should pass to <code>delay</code> method.</p>"},{"location":"getting-started/schedule-tasks/#filter","title":"filter","text":"<p>Get a queryset of ScheduledTask's. It accepts the arguments whichever you should pass to <code>delay</code> method.</p>"},{"location":"getting-started/schedule-tasks/#see-all-scheduled-tasks-in-django-admin","title":"See all scheduled tasks in Django Admin","text":"<p>Go to <code>/admin/task_manager/scheduledtask/</code>.</p>"},{"location":"getting-started/set-up/","title":"Set up","text":""},{"location":"getting-started/set-up/#add-task_manager-to-your-scheduler","title":"Add task_manager to your scheduler","text":"<p><code>python manage.py task_manager</code> manage all related to the task manager.</p>"},{"location":"getting-started/task/","title":"Task","text":"<p><code>task</code> is a regular decorator that wraps a Celery <code>shared_task</code> to use Task Manager. It could track and monitor your tasks executions and protect your task queue against a Redis shutdown process.</p>"},{"location":"getting-started/task/#parameters","title":"Parameters","text":"<p>All parameters are the same that get a celery <code>shared_task</code>.</p>"},{"location":"getting-started/task/#examples","title":"Examples","text":"<pre><code>import logging\n\nfrom task_manager.core.exceptions import AbortTask, RetryTask\nfrom task_manager.django.decorators import task\n\nfrom breathecode.utils.decorators import TaskPriority\nfrom breathecode.services.google_cloud.storage import Storage\nfrom .models import Asset\n\n\nlogger = logging.getLogger(__name__)\n\n\n@task(priority=TaskPriority.ACADEMY.value)\ndef async_delete_asset_images(asset_slug, **_):\n\n    asset = Asset.get_by_slug(asset_slug)\n    if asset is None:\n        raise RetryTask(f'Asset with slug {asset_slug} not found')\n\n    storage = Storage()\n    for img in asset.images.all():\n        if img.assets.count() == 1 and img.asset.filter(slug=asset_slug).exists():\n            extension = pathlib.Path(img.name).suffix\n            cloud_file = storage.file(asset_images_bucket(), img.hash + extension)\n            cloud_file.delete()\n            img.delete()\n        else:\n            img.assets.remove(asset)\n\n        logger.info(f'Image {img.name} was deleted')\n</code></pre>"},{"location":"getting-started/task/#available-exceptions","title":"Available exceptions","text":"<p>Task manager listens for our exceptions, and it modifies the behavior of the execution, all exceptions that are not included in this list are marked as an <code>ERROR</code>.</p>"},{"location":"getting-started/task/#aborttask","title":"AbortTask","text":"<p>Abort the execution of this task, because the requirements were not met.</p>"},{"location":"getting-started/task/#retrytask","title":"RetryTask","text":"<p>Mark this task to be retried, due to the database does not include the required content yet.</p>"},{"location":"getting-started/task/#circuitbreakererror","title":"CircuitBreakerError","text":"<p>Mark this task to be retried. due to an error that occurred in another service.</p>"},{"location":"getting-started/task/#see-all-executions-in-django-admin","title":"See all executions in Django Admin","text":"<p>Go to <code>/admin/task_manager/taskmanager/</code> you should see, manage and find all data collected through of Task Manager.</p>"}]}